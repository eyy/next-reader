{
  "name": "resors",
  "description": "Simply write resources (for express and mongoose)",
  "version": "0.1.0",
  "author": {
    "name": "Etay Peretz",
    "email": "etai@empeeric.com"
  },
  "contributors": [
    {
      "name": "Alon Valadji",
      "email": "alon@ronin.co.il",
      "url": "http://www.ronin.co.il"
    }
  ],
  "scripts": {
    "start": "node example/app"
  },
  "dependencies": {
    "xtend": ""
  },
  "devDependencies": {
    "express": "3.x.x",
    "mongoose": "",
    "formage-admin": "",
    "jade": "",
    "nodeunit": ""
  },
  "main": "index.js",
  "repository": {
    "type": "git",
    "url": "https://github.com/etaypere/resors.git"
  },
  "readme": "#Resors\r\n\r\n> Simply write resource.\r\n\r\nIntroduction\r\n---\r\n\r\nDo you want to REST your way to your mongoose models?\r\nWell, **Resors** do exactly that right out of the box.\r\n\r\nSynopsis\r\n---\r\n\r\n**Resors** operates ontop of Express so you need to create your express app first.\r\n\r\n```js\r\nvar express = require('express'),\r\n    app = express();\r\n    \r\napp.use(express.bodyParser());\r\napp.use(express.methodOverride());\r\napp.use(app.router)\r\n    \r\nhttp.createServer(app).listen(80, function(){\r\n    console.log('Server listening on port 80' );\r\n});\r\n```\r\n\r\nInstall Mongoose and write your models as you are usually do.\r\n```js\r\nvar mongoose = require('mongoose');\r\n\r\nvar schema = new mongoose.Schema({\r\n    name: String,\r\n    email: { type: String, required: true }\r\n})\r\n\r\nvar model = mongoose.model('users', schema);\r\n```\r\n\r\nNow add **Resors**.\r\n\r\n```js\r\nvar Resors = require('resors');\r\n\r\napp.use('/api', Resors.middleware());\r\n```\r\n\r\nAnd that's it! your REST server is on `http://localhost/api` see the list of resources.\r\n\r\n**Resors** only allow GET http method out of the box, \r\nif you want to enable other methods just add to the model:\r\n```js\r\nmodel.resors = {\r\n  allow = [ 'get', 'post', 'put', 'delete' ];\r\n}\r\n```\r\nIf you don't want the model having **Resors**, set `model.resors = false`.\r\n\r\nNow you have a full CRUD application with REST :)\r\n\r\nCheck out `\\example\\` for more.\r\n\r\nResors middlewares partly-explained\r\n---------------------------\r\n\r\n**Resors** is built on top of express.js, using connect middleware mechanism to function.\r\nEach request follows a series of middlewares, as follows:\r\n\r\n```\r\n/*\r\ninit          X\r\n\r\nbefore        usage: authentication, validation\r\n              vars: req.resors, req.authenticated\r\n\r\nerror check   X\r\n\r\nroute         (index, show, create, update, delete)\r\n\r\nquery         (runs only for `index` and `show`)\r\n              usage: populate, authorization\r\n              vars: res.query\r\n\r\nexec          (executes res.query, doesn't runs for `create`)\r\n\r\nafter         usage: post-production\r\n              vars: res.err, res.result\r\n\r\nfinish        (send res.err or err.result)\r\n*/\r\n```\r\n\r\nEach middleware receives `req`, `res`, and `next` as params, and `this` is set to the `Resors` instance.\r\nTherefore, `next()` will move to the next middleware, `this.finish(req, res)` will jump to the movie end,\r\nand `res.json(false)` will, e.g., return a negative response.\r\n\r\n\r\nSponsors\r\n---\r\n<a id=\"stormlogo\" href=\"http://www.jetbrains.com/webstorm/\" alt=\"Smart IDE for web development with HTML Editor, CSS &amp; JavaScript support\" title=\"Smart IDE for web development with HTML Editor, CSS &amp; JavaScript support\">\r\n  ![](http://i.imgur.com/ynQ6c.png)\r\n</a>\r\n",
  "readmeFilename": "README.md",
  "_id": "resors@0.1.0",
  "_from": "resors@"
}
